{"ast":null,"code":"import _objectSpread from \"D:\\\\study\\\\Coursera\\\\Web\\\\2)frontEnd-React\\\\confusion\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl'; //comments\n\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n}; //leaders\n\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n}; //dishes\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, //when server not even response\n  error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n}; //comments\n\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n}; //promos\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n}); //feedback\n\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const postFeedback = feedback => dispatch => {\n  const feedbackData = _objectSpread({}, feedback);\n\n  feedbackData.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(feedbackData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    dispatch(addFeedback(response));\n    alert('Thank you for your response!\\n' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('Feedback: ', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["D:\\study\\Coursera\\Web\\2)frontEnd-React\\confusion\\src\\redux\\ActionCreator.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","addLeaders","leaders","ADD_LEADERS","leadersLoading","LEADERS_LOADING","leadersFailed","LEADERS_FAILED","fetchLeaders","dishesLoading","DISHES_LOADING","dishesFailed","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchDishes","commentsFailed","COMMENTS_FAILED","addComments","comments","ADD_COMMENTS","fetchComments","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","addFeedback","feedback","ADD_FEEDBACK","postFeedback","feedbackData"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,mBAAxB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAIC,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEJ,WAAW,CAACK,WADoB;AAEtCC,EAAAA,OAAO,EAAEH;AAF6B,CAAd,CAAnB;AAIP,OAAO,MAAMI,WAAW,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBP,OAAzB,KAAsCQ,QAAD,IAAc;AAE5E,QAAMC,UAAU,GAAG;AACfJ,IAAAA,MAAM,EAAEA,MADO;AAEfC,IAAAA,MAAM,EAAEA,MAFO;AAGfC,IAAAA,MAAM,EAAEA,MAHO;AAIfP,IAAAA,OAAO,EAAEA;AAJM,GAAnB;AAMAS,EAAAA,UAAU,CAACC,IAAX,GAAkB,IAAIC,IAAJ,GAAWC,WAAX,EAAlB;AAEA,SAAOC,KAAK,CAACf,OAAO,GAAG,UAAX,EAAuB;AAC/BgB,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,UAAf,CAFyB;AAG/BS,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHsB;AAM/BC,IAAAA,WAAW,EAAE;AANkB,GAAvB,CAAL,CAQJC,IARI,CAQCC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAhBE,EAiBHA,KAAK,IAAI;AACP,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACD,GApBE,EAqBJP,IArBI,CAqBCC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EArBb,EAsBJT,IAtBI,CAsBCC,QAAQ,IAAIb,QAAQ,CAACT,UAAU,CAACsB,QAAD,CAAX,CAtBrB,EAuBJS,KAvBI,CAuBEP,KAAK,IAAK;AAAEQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,KAAK,CAACK,OAAnC;AAA6CK,IAAAA,KAAK,CAAC,8CAA4CV,KAAK,CAACK,OAAnD,CAAL;AAAmE,GAvB9H,CAAP;AAwBD,CAlCM,C,CAoCP;;AACA,OAAO,MAAMM,UAAU,GAAIC,OAAD,KAAc;AACtClC,EAAAA,IAAI,EAAEJ,WAAW,CAACuC,WADoB;AAEtCjC,EAAAA,OAAO,EAAEgC;AAF6B,CAAd,CAAnB;AAIP,OAAO,MAAME,cAAc,GAAG,OAAO;AACnCpC,EAAAA,IAAI,EAAEJ,WAAW,CAACyC;AADiB,CAAP,CAAvB;AAIP,OAAO,MAAMC,aAAa,GAAIZ,OAAD,KAAc;AACzC1B,EAAAA,IAAI,EAAEJ,WAAW,CAAC2C,cADuB;AAEzCrC,EAAAA,OAAO,EAAEwB;AAFgC,CAAd,CAAtB;AAIP,OAAO,MAAMc,YAAY,GAAG,MAAOjC,QAAD,IAAc;AAE9CA,EAAAA,QAAQ,CAAC6B,cAAc,EAAf,CAAR;AAEA,SAAOxB,KAAK,CAACf,OAAO,GAAG,SAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACL,GAbI,EAcNP,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EAdX,EAeNT,IAfM,CAeDe,OAAO,IAAI3B,QAAQ,CAAC0B,UAAU,CAACC,OAAD,CAAX,CAflB,EAgBNL,KAhBM,CAgBAP,KAAK,IAAIf,QAAQ,CAAC+B,aAAa,CAAChB,KAAK,CAACK,OAAP,CAAd,CAhBjB,CAAP;AAiBD,CArBM,C,CAuBP;;AACA,OAAO,MAAMc,aAAa,GAAG,OAAO;AAClCzC,EAAAA,IAAI,EAAEJ,WAAW,CAAC8C;AADgB,CAAP,CAAtB;AAIP,OAAO,MAAMC,YAAY,GAAIjB,OAAD,KAAc;AACxC1B,EAAAA,IAAI,EAAEJ,WAAW,CAACgD,aADsB;AAExC1C,EAAAA,OAAO,EAAEwB;AAF+B,CAAd,CAArB;AAKP,OAAO,MAAMmB,SAAS,GAAIC,MAAD,KAAa;AACpC9C,EAAAA,IAAI,EAAEJ,WAAW,CAACmD,UADkB;AAEpC7C,EAAAA,OAAO,EAAE4C;AAF2B,CAAb,CAAlB;AAIP,OAAO,MAAME,WAAW,GAAG,MAAOzC,QAAD,IAAc;AAE3CA,EAAAA,QAAQ,CAACkC,aAAa,CAAC,IAAD,CAAd,CAAR;AAEA,SAAO7B,KAAK,CAACf,OAAO,GAAG,QAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAGK;AACH,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAVI,EAWL;AACAA,EAAAA,KAAK,IAAI;AACH,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACL,GAfI,EAgBNP,IAhBM,CAgBDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EAhBX,EAiBNT,IAjBM,CAiBD2B,MAAM,IAAIvC,QAAQ,CAACsC,SAAS,CAACC,MAAD,CAAV,CAjBjB,EAkBNjB,KAlBM,CAkBAP,KAAK,IAAIf,QAAQ,CAACoC,YAAY,CAACrB,KAAK,CAACK,OAAP,CAAb,CAlBjB,CAAP;AAmBH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMsB,cAAc,GAAIvB,OAAD,KAAc;AAC1C1B,EAAAA,IAAI,EAAEJ,WAAW,CAACsD,eADwB;AAE1ChD,EAAAA,OAAO,EAAEwB;AAFiC,CAAd,CAAvB;AAKP,OAAO,MAAMyB,WAAW,GAAIC,QAAD,KAAe;AACxCpD,EAAAA,IAAI,EAAEJ,WAAW,CAACyD,YADsB;AAExCnD,EAAAA,OAAO,EAAEkD;AAF+B,CAAf,CAApB;AAIP,OAAO,MAAME,aAAa,GAAG,MAAM/C,QAAD,IAAc;AAC5C,SAAOK,KAAK,CAACf,OAAO,GAAG,UAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACL,GAbI,EAcNP,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EAdX,EAeNT,IAfM,CAeDiC,QAAQ,IAAI7C,QAAQ,CAAC4C,WAAW,CAACC,QAAD,CAAZ,CAfnB,EAgBNvB,KAhBM,CAgBAP,KAAK,IAAIf,QAAQ,CAAC0C,cAAc,CAAC3B,KAAK,CAACK,OAAP,CAAf,CAhBjB,CAAP;AAiBH,CAlBM,C,CAoBP;;AACA,OAAO,MAAM4B,WAAW,GAAG,MAAOhD,QAAD,IAAc;AAE3CA,EAAAA,QAAQ,CAACiD,aAAa,EAAd,CAAR;AAEA,SAAO5C,KAAK,CAACf,OAAO,GAAG,YAAX,CAAL,CACNsB,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACL,GAbI,EAcNP,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EAdX,EAeNT,IAfM,CAeDsC,MAAM,IAAIlD,QAAQ,CAACmD,SAAS,CAACD,MAAD,CAAV,CAfjB,EAgBN5B,KAhBM,CAgBAP,KAAK,IAAIf,QAAQ,CAACoD,YAAY,CAACrC,KAAK,CAACK,OAAP,CAAb,CAhBjB,CAAP;AAiBH,CArBM;AAwBP,OAAO,MAAM6B,aAAa,GAAG,OAAO;AAChCxD,EAAAA,IAAI,EAAEJ,WAAW,CAACgE;AADc,CAAP,CAAtB;AAIP,OAAO,MAAMD,YAAY,GAAIjC,OAAD,KAAc;AACtC1B,EAAAA,IAAI,EAAEJ,WAAW,CAACiE,aADoB;AAEtC3D,EAAAA,OAAO,EAAEwB;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAMgC,SAAS,GAAID,MAAD,KAAa;AAClCzD,EAAAA,IAAI,EAAEJ,WAAW,CAACkE,UADgB;AAElC5D,EAAAA,OAAO,EAAEuD;AAFyB,CAAb,CAAlB,C,CAKN;;AAEA,OAAO,MAAMM,WAAW,GAAIC,QAAD,KAAe;AACzChE,EAAAA,IAAI,EAAEJ,WAAW,CAACqE,YADuB;AAEzC/D,EAAAA,OAAO,EAAE8D;AAFgC,CAAf,CAApB;AAKR,OAAO,MAAME,YAAY,GAAIF,QAAD,IAAezD,QAAD,IAAc;AACpD,QAAM4D,YAAY,qBACbH,QADa,CAAlB;;AAGAG,EAAAA,YAAY,CAAC1D,IAAb,GAAoB,IAAIC,IAAJ,GAAWC,WAAX,EAApB;AAEA,SAAOC,KAAK,CAACf,OAAO,GAAG,UAAX,EAAuB;AACjCgB,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAemD,YAAf,CAF2B;AAGjClD,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAHwB;AAMjCC,IAAAA,WAAW,EAAE;AANoB,GAAvB,CAAL,CAQNC,IARM,CAQDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAhBI,EAiBLA,KAAK,IAAI;AACH,UAAMA,KAAN;AACL,GAnBI,EAoBNH,IApBM,CAoBDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EApBX,EAqBNT,IArBM,CAqBDC,QAAQ,IAAI;AAACb,IAAAA,QAAQ,CAACwD,WAAW,CAAC3C,QAAD,CAAZ,CAAR;AAAiCY,IAAAA,KAAK,CAAC,mCAAiCjB,IAAI,CAACC,SAAL,CAAeI,QAAf,CAAlC,CAAL;AAAmE,GArBhH,EAsBNS,KAtBM,CAsBAP,KAAK,IAAK;AAAEQ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BT,KAAK,CAACK,OAAhC;AAA0CK,IAAAA,KAAK,CAAC,+CAA6CV,KAAK,CAACK,OAApD,CAAL;AAAoE,GAtB1H,CAAP;AAuBH,CA7BM","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n//comments\r\nexport const addComment = (comment) => ({\r\n  type: ActionTypes.ADD_COMMENT,\r\n  payload: comment\r\n})\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n  const newComment = {\r\n      dishId: dishId,\r\n      rating: rating,\r\n      author: author,\r\n      comment: comment\r\n  };\r\n  newComment.date = new Date().toISOString();\r\n  \r\n  return fetch(baseUrl + 'comments', {\r\n      method: \"POST\",\r\n      body: JSON.stringify(newComment),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      credentials: \"same-origin\"\r\n  })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\n//leaders\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders\r\n})\r\nexport const leadersLoading = () => ({\r\n  type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.LEADERS_FAILED,\r\n  payload: errmess\r\n});\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    \r\n  dispatch(leadersLoading());\r\n\r\n  return fetch(baseUrl + 'leaders')\r\n  .then(response => {\r\n      if (response.ok) {\r\n        return response;\r\n      } else {\r\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n    },\r\n    error => {\r\n          var errmess = new Error(error.message);\r\n          throw errmess;\r\n    })\r\n  .then(response => response.json())\r\n  .then(leaders => dispatch(addLeaders(leaders)))\r\n  .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\n//dishes\r\nexport const dishesLoading = () => ({\r\n  type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n  type: ActionTypes.DISHES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n  type: ActionTypes.ADD_DISHES,\r\n  payload: dishes\r\n});\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } \r\n        else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      //when server not even response\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\n//comments\r\nexport const commentsFailed = (errmess) => ({\r\n  type: ActionTypes.COMMENTS_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n  type: ActionTypes.ADD_COMMENTS,\r\n  payload: comments\r\n});\r\nexport const fetchComments = () =>(dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n}\r\n\r\n//promos\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n //feedback\r\n\r\n export const addFeedback = (feedback) => ({\r\n  type: ActionTypes.ADD_FEEDBACK,\r\n  payload: feedback\r\n});\r\n\r\nexport const postFeedback = (feedback) => (dispatch) => {\r\n    const feedbackData = {\r\n      ...feedback\r\n    }\r\n    feedbackData.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'feedback', {\r\n      method: \"POST\",\r\n      body: JSON.stringify(feedbackData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => {dispatch(addFeedback(response)); alert('Thank you for your response!\\n'+JSON.stringify(response)); })\r\n    .catch(error =>  { console.log('Feedback: ', error.message); alert('Your feedback could not be posted\\nError: '+error.message); });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}